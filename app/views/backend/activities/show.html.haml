-# set unit for this view
- inspection_unit = Nomen::Unit[:ton]
- inspection_yield_unit = Nomen::Unit[:ton_per_hectare]

- main_toolbar do |t|
  = t.edit resource
  - budget = resource.budget_of(current_campaign)
  - if budget && budget.items.any?
    = t.edit params: {controller: :activity_budgets, id: budget.id}, label: :edit_budget.tl
  - if resource.use_countings?
    = link_to(PlantDensityAbacus.model_name.human, { controller: :plant_density_abaci, action: :index}, class: 'btn btn-default')
  - if current_campaign && resource.productions.of_campaign(current_campaign).empty?
    = tool_to(:close.ta, { controller: :campaigns, action: :close, id: current_campaign.id, activity_id: resource.id, redirect: url_for(controller: :campaigns, action: :show, id: current_campaign.id) }, method: :delete, data: { confirm: :are_you_sure.tl }, tool: :remove)

- main_campaign_selector


= main_informations do
  = attributes_list do |l|
    - l.attribute :production_system
    - l.attribute :use_countings
    - l.attribute :use_gradings
    -# if resource.use_gradings
      - l.attribute :measure_grading_net_mass
      - if resource.measure_grading_net_mass
        - l.attribute :grading_net_mass_unit
      - l.attribute :measure_grading_sizes
      - if resource.measure_grading_sizes
        - l.attribute :grading_sizes_indicator
        - l.attribute :grading_sizes_unit

= cobbles do |c|

  - if current_campaign
    - c.cobble :budget do
      = render 'budget'
  -# c.cobble :details do
    = attributes_list do |l|
      - l.attribute :nature
      - l.attribute :family
      - l.attribute :production_system_name
      - if resource.with_cultivation
        - l.attribute :cultivation_variety
      - if resource.with_supports
        - l.attribute :support_variety
      - l.attribute :production_cycle

  - if resource.plant_farming? && current_campaign && resource.productions.of_campaign(current_campaign).any?

    - c.cobble :map do
      :ruby
        data = []
        resource.productions.of_campaign(current_campaign).find_each do |support|
          next unless support.support_shape

          item = {
            name:       support.name,
            shape:      support.support_shape,
            shape_color: support.activity.color,
            grain_yield: support.grains_yield.to_s.to_f.round(2)
          }
          data << item
        end

        data_inspection = []
        plant_ids = resource.inspections.pluck(:product_id).uniq
        Plant.where(id: plant_ids).each do |plant|
          next unless plant.shape
          # for inspections
          last_inspection = plant.inspections.reorder(:sampled_at).last

          disease_percentage = last_inspection.points_net_mass_percentage('disease').round(2) if last_inspection

          # for plant analysis
          last_plant_analysis = plant.analyses.where(nature: 'plant_analysis').reorder(:sampled_at).last
          ready_to_harvest = last_plant_analysis.items.where(indicator_name: 'ready_to_harvest').boolean_value if last_plant_analysis

          disease_color = '#33FF39'

          item = {
            name:       plant.name,
            shape:      plant.shape,
            shape_color: disease_color,
            disease: disease_percentage
          }
          data_inspection << item
        end

      - if data.empty?
        .placeholding-message= :no_production_defined_for_current_campaign.tn
      - else
        = visualization do |v|
          - v.serie :main, data
          - v.simple :support, :main
          - if !data_inspection.empty?
            - v.serie :second, data_inspection
            - v.choropleth :disease, :second, stop_color: "#FF7733"
          - v.control :zoom
          - v.control :scale
          - v.control :fullscreen
          - v.control :layer_selector

  - if resource.with_supports
    - c.cobble(:productions) do
      = render 'productions'

  - if resource.auxiliary?
    - c.cobble(:distributions, title: Activity.human_attribute_name(:distributions)) do
      :ruby
        data = []
        resource.distributions.reorder(:affectation_percentage).find_each do |distribution|
          y = distribution.affectation_percentage.to_s.to_f
          data << {name: :label_value.th(label: distribution.main_activity_name, value: number_to_percentage(y, precision: 2)), y: y }
        end
        series = [{type: 'pie', name: Activity.human_attribute_name(:distributions), data: data}]

      = pie_highcharts(series, legend: true)

  - if resource.use_gradings
    - c.cobble(:stock_in_ground) do
      %table
        %tbody
          - resource.inspection_calibration_scales.each do |scale|
            :ruby
              symbol_measure = inspection_unit.symbol
              yield_symbol_measure = inspection_yield_unit.symbol

              # get last calibration for each plant of the current activity
              dataset_inspections = resource.inspections

              # get all plants in dataset
              plants = Plant.at(Time.now).where(id: dataset_inspections.pluck(:product_id).uniq)

              # get all inspections calibrations nature in activity
              natures = resource.inspection_calibration_natures

              # get last inspection for each plant
              dataset_last_inspections = []
              plants.each do |plant|
                dataset_last_inspections << dataset_inspections.where(product: plant).reorder(:sampled_at).last
              end

              series = []
              yield_series = []

              natures.each do |nature|
                last_calibrations = []
                last_calibrations_yield = []
                dataset_last_inspections.each do |last_inspection|
                  l = last_inspection.calibrations.of_scale(scale).where(nature_id: nature.id)
                  last_calibrations << l.first.marketable_net_mass.round(0).to_d(inspection_unit)
                  last_calibrations_yield << l.first.marketable_mass_yield.round(0).to_d(inspection_yield_unit)
                end
                series << { name: nature.name, data: [last_calibrations.compact.sum.to_s.to_f] }
                yield_series << { name: nature.name, data: [(last_calibrations_yield.compact.sum / last_calibrations_yield.compact.count).to_s.to_f] }
              end

              # spline
              spline_series = []
              spline_categories = []
              spline_dataset = dataset_inspections.reorder(:sampled_at)

              # build categories
              spline_dataset.each do |inspection|
                spline_categories << inspection.sampled_at.l
              end

              # category level
              ActivityInspectionPointNature.unmarketable_categories.each do |category|
                spline_data = []
                # inspection level (compute progressive average for each inspection)
                avg_arr = []
                spline_dataset.each_with_index do |inspection, index|
                  dataset = spline_dataset[0..index]
                  dataset = dataset.group_by(&:product_id).select do |plant, _|
                    curr_date = inspection.sampled_at
                    Plant.at(curr_date).include? Plant.find(plant)
                  end
                  dataset = dataset.map do |_, inspections|
                    inspections.last.points_net_mass_percentage(category).round(2).to_s.to_f
                  end
                  p dataset
                  spline_data << dataset.compact.sum / dataset.compact.count unless dataset.empty?
                end
                spline_series << {name: category.l, data: spline_data}
              end

            %td{style: 'width: 33%' }= column_highcharts(series, title: {text: :stock_in_ground_by_calibration.tl}, y_axis: {reversed_stacks: false, title: {text: "#{symbol_measure}"}, stack_labels: {enabled: true}}, legend: true, tooltip: {point_format: "{point.y: 1f} #{symbol_measure}"}, plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})
            %td{style: 'width: 33%' }= column_highcharts(yield_series, title: {text: :yield_by_calibration.tl}, y_axis: {reversed_stacks: false, title: {text: "#{yield_symbol_measure}"}, stack_labels: {enabled: true}}, legend: true, tooltip: {point_format: "{point.y: 1f} #{symbol_measure}"}, plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})
            %td{style: 'width: 33%' }= spline_highcharts(spline_series, x_axis: {categories: spline_categories} ,title: {text: :unmarketable_inspection_categories_evolution.tl}, legend: true, tooltip: {point_format: "{point.y: 1f} %"}, plot_options: {})

    - c.cobble(:inspections) do
      = cobble_list :inspections

