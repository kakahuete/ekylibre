- choices = resource.unit_choices
- user_pref = resource.unit_preference(current_user)

- main_toolbar do |t|
  = t.edit resource
  = t.destroy

= main_informations do
  = attributes_list do |l|
    - l.attribute :number
    - l.attribute :sampled_at
    - l.attribute :sampling_area
    - l.attribute :product_net_surface_area
    - l.attribute :product, url: true
    - l.attribute :activity, url: true
    - l.attribute :comment


= cobbles do |c|

  - c.cobble(:totals) do
    = render "preference_btns", inspection: resource

    = infos do
      - ActivityInspectionPointNature.unmarketable_categories.each do |category|
        .med-info
          %span.title= category.l
          %span.value= resource.points_net_mass_percentage(category).round(2).l(precision: 2) + '%'
      - case user_pref
      - when :mass
        = render "totals", to_display: user_pref, resource: resource
      - when :items
        = render "totals", to_display: user_pref, resource: resource

  - if resource.calibrations.any?
    - if resource.activity.measure_grading_net_mass && resource.calibrations.sum(:net_mass_value) > 0

      - c.cobble("stock_in_ground_#{user_pref}") do
        = render "preference_btns", inspection: resource
        %table
          %tbody
            - resource.scales.each do |scale|
              :ruby
                dataset = resource.calibrations.of_scale(scale).reorder(:id)
              - case user_pref
              - when :mass
                = render "charts", to_graph: "net_mass", dataset: dataset, resource: resource, scale: scale
              - when :items
                = render "charts", to_graph: "items_count", dataset: dataset, resource: resource, scale: scale
              - else
                = render "charts", to_graph: "net_mass", dataset: dataset, resource: resource, scale: scale
                = render "charts", to_graph: "items_count", dataset: dataset, resource: resource, scale: scale

  - c.cobble(:analyses) do
    - analysis = Analysis.where(product: resource.product, nature: 'plant_analysis').reorder(:sampled_at).last
    - if analysis
      .med-info
        %span.title= Analysis.human_attribute_name(:number)
        %span.value
          %i.picto{class: "picto-flask"}
          = link_to(analysis.number, {controller: :analyses, action: :show, id: analysis.id})
    .help-panel
      = link_to(:new.ta, {controller: :analyses, action: :new, nature: 'plant_analysis', product_id: resource.product.id, sampled_at: Time.now}, class: 'btn btn-default')

  - c.cobble(:data) do
    - colspan = 3
    - colspan += 1 if resource.measure_grading_items_count
    - colspan += 1 if resource.measure_grading_net_mass
    - colspan += 2 if resource.measure_grading_sizes
    - colspan += 2 if resource.mass_statable?
    %table
      %thead
      %tbody
        - resource.scales.order(:id).each do |scale|
          %tr.title
            %th{ colspan: colspan }= scale.size_indicator.human_name
          %tr
            %th= InspectionCalibration.human_attribute_name(:name)
            - if resource.measure_grading_items_count
              %th= InspectionCalibration.human_attribute_name(:items_count)
            - if resource.measure_grading_net_mass
              %th= InspectionCalibration.human_attribute_name(:net_mass)
            - if resource.measure_grading_sizes
              %th= InspectionCalibration.human_attribute_name(:minimal_size)
              %th= InspectionCalibration.human_attribute_name(:maximal_size)
            - if resource.mass_statable?
              %th= :total.tl
              %th= :yield.tl
              %th= InspectionCalibration.human_attribute_name(:marketable)
          - resource.calibrations.of_scale(scale).reorder(:id).each do |calibration|
            %tr
              %td= calibration.nature_name
              - if resource.measure_grading_items_count
                %td.decimal= calibration.items_count_in_unit
              - if resource.measure_grading_net_mass
                %td.decimal= calibration.net_mass_in_unit.l(precision: 0)
              - if resource.measure_grading_sizes
                %td.decimal= calibration.minimal_size.l(precision: 0)
                %td.decimal= calibration.maximal_size.l(precision: 0)
              - if resource.mass_statable?
                %td.decimal= calibration.total_net_mass.l(precision: 0)
                %td.decimal= calibration.net_mass_yield.l(precision: 0)
                %td.decimal= calibration.marketable? ? calibration.marketable_net_mass.round(0).l(precision: 0) : '&ndash;'.html_safe
          %tr.total
            %th= :totals.tl
            - if resource.measure_grading_items_count
              %th.decimal= resource.items_count(scale)
            - if resource.measure_grading_net_mass
              %th.decimal= resource.net_mass(scale).l(precision: 0)
            - if resource.measure_grading_sizes
              %th.decimal &ndash;
              %th.decimal &ndash;
            - if resource.mass_statable?
              %th.decimal= resource.total_net_mass(scale).l(precision: 0)
              %th.decimal= resource.net_mass_yield(scale).l(precision: 0)
              %th.decimal= resource.marketable_net_mass(scale).l(precision: 0)
        - if resource.points.any?
          %tr.title
            %th{ colspan: colspan }= Inspection.human_attribute_name(:points)
          %tr
            %th= InspectionPoint.human_attribute_name(:name)
            - if resource.measure_grading_items_count
              %th= InspectionPoint.human_attribute_name(:items_count)
            - if resource.measure_grading_net_mass
              %th= InspectionPoint.human_attribute_name(:net_mass)
            - if resource.measure_grading_sizes
              %th= InspectionPoint.human_attribute_name(:minimal_size)
              %th= InspectionPoint.human_attribute_name(:maximal_size)
            - if resource.mass_statable?
              %th= :total.tl
              %th= :yield.tl
              %th= InspectionPoint.human_attribute_name(:net_mass_percentage)
          - resource.points.joins(:nature).order('category, name').each do |point|
            %tr
              %td= point.nature_name
              - if resource.measure_grading_items_count
                %td.decimal= point.items_count_in_unit
              - if resource.measure_grading_net_mass
                %td.decimal= point.net_mass_in_unit.l(precision: 0)
              - if resource.measure_grading_sizes
                %td.decimal= point.minimal_size.l(precision: 0)
                %td.decimal= point.maximal_size.l(precision: 0)
              - if resource.mass_statable?
                %td.decimal= point.total_net_mass.l(precision: 0)
                %td.decimal= point.net_mass_yield.l(precision: 0)
                %td.decimal= point.net_mass_percentage.round(2).l(precision: 2) + '%'
          - (ActivityInspectionPointNature.category.values - ['none']).each do |category|
            %tr.subtotal
              %th= "enumerize.activity_inspection_point_nature.category.#{category}".t
              - if resource.measure_grading_items_count
                %td.decimal= resource.points_items_count(category)
              - if resource.measure_grading_net_mass
                %td.decimal= resource.points_net_mass(category).l(precision: 0)
              - if resource.measure_grading_sizes
                %td.decimal &ndash;
                %td.decimal &ndash;
              - if resource.mass_statable?
                %td.decimal= resource.total_points_net_mass(category).l(precision: 0)
                %td.decimal= resource.points_net_mass_yield(category).l(precision: 0)
                %td.decimal= resource.points_net_mass_percentage(category).round(2).l(precision: 2) + '%'
          %tr.total
            %th= :totals.tl
            - if resource.measure_grading_items_count
              %th.decimal= resource.points_items_count
            - if resource.measure_grading_net_mass
              %th.decimal= resource.points_net_mass.l(precision: 0)
            - if resource.measure_grading_sizes
              %th.decimal &ndash;
              %th.decimal &ndash;
            - if resource.mass_statable?
              %th.decimal= resource.total_points_net_mass.l(precision: 0)
              %th.decimal= resource.points_net_mass_yield.l(precision: 0)
              %th.decimal= resource.points_net_mass_percentage.round(2).l(precision: 2) + '%'

